plugins {
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'name.remal.sonarlint' version '1.5.0'
    id 'org.sonarqube' version '3.3'
}

ext {
    serviceName = 'board'
    serviceVersion = '5.1.0-SNAPSHOT'
    
    accentVersion = '5.1.2'
    prologueVersion = '5.1.1'
    lombokVersion = '1.18.24'
    springVersion = '5.3.24'
    springBootVersion = '2.7.6'
    springSecurityOauth2Version = '2.5.2.RELEASE'
    springSecurityJwtVersion = '1.1.1.RELEASE'
    jaxbVersion = '2.3.5'
}

sonarqube {
    def bootProject = project(":${serviceName}-boot")
    properties {
        property 'sonar.coverage.jacoco.xmlReportPaths', "${bootProject.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

allprojects {
    group 'io.vizend'
    version serviceVersion
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

def useMavenLocalFirst = false
subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'io.spring.dependency-management'
    
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    
    repositories {
        if (useMavenLocalFirst) {
            mavenLocal()
        }
        maven {
            credentials {
                username System.getenv('NEXUS_ID') ?: nexususer
                password System.getenv('NEXUS_PASSWORD') ?: nexuspassword
            }
            url "${nexusBaseUrl}/${nexusPublicRepository}"
            allowInsecureProtocol = true
        }
        if (!useMavenLocalFirst) {
            mavenLocal()
        }
        mavenCentral()
    }
    
    publishing {
        repositories {
            maven {
                credentials {
                    username System.getenv('NEXUS_ID') ?: nexususer
                    password System.getenv('NEXUS_PASSWORD') ?: nexuspassword
                }
                def releasesRepoUrl = "${nexusBaseUrl}/${nexusReleaseRepository}"
                def snapshotsRepoUrl = "${nexusBaseUrl}/${nexusSnapshotRepository}"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                allowInsecureProtocol true
                println "url: ${url}"
            }
        }
    }
    
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
    }
    
    dependencies {
        compileOnly("org.projectlombok:lombok:${lombokVersion}")
        annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        testImplementation("org.projectlombok:lombok:${lombokVersion}")
        testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    }
    
    sonarlint {
        ignoreFailures false
        excludes {
            source '**/aggregate/**/*'
            source '**/facade/**/projection/**/*'
            source '**/test/java/**/*'
            
            message 'java:S1135'
            message 'java:S1301'
            message 'java:S115'
            message 'java:S1192'
            message 'java:S106'
        }
    }
    
    test {
        useJUnitPlatform()
    }
}

task printServiceName() {
    doLast {
        println "serviceName: ${serviceName}"
    }
}